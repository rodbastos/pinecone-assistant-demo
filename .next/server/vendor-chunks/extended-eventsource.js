"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/extended-eventsource";
exports.ids = ["vendor-chunks/extended-eventsource"];
exports.modules = {

/***/ "(action-browser)/./node_modules/extended-eventsource/dist/index.esm.js":
/*!*************************************************************!*\
  !*** ./node_modules/extended-eventsource/dist/index.esm.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CustomEventSource: () => (/* binding */ CustomEventSource),\n/* harmony export */   EventSource: () => (/* binding */ CustomEventSource)\n/* harmony export */ });\nvar commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};\n\nvar documentAll$2 = typeof document == 'object' && document.all;\n\n// https://tc39.es/ecma262/#sec-IsHTMLDDA-internal-slot\n// eslint-disable-next-line unicorn/no-typeof-undefined -- required for testing\nvar IS_HTMLDDA = typeof documentAll$2 == 'undefined' && documentAll$2 !== undefined;\n\nvar documentAll_1 = {\n  all: documentAll$2,\n  IS_HTMLDDA: IS_HTMLDDA\n};\n\nvar $documentAll$1 = documentAll_1;\n\nvar documentAll$1 = $documentAll$1.all;\n\n// `IsCallable` abstract operation\n// https://tc39.es/ecma262/#sec-iscallable\nvar isCallable$e = $documentAll$1.IS_HTMLDDA ? function (argument) {\n  return typeof argument == 'function' || argument === documentAll$1;\n} : function (argument) {\n  return typeof argument == 'function';\n};\n\nvar objectDefineProperty = {};\n\nvar fails$b = function (exec) {\n  try {\n    return !!exec();\n  } catch (error) {\n    return true;\n  }\n};\n\nvar fails$a = fails$b;\n\n// Detect IE8's incomplete defineProperty implementation\nvar descriptors = !fails$a(function () {\n  // eslint-disable-next-line es/no-object-defineproperty -- required for testing\n  return Object.defineProperty({}, 1, { get: function () { return 7; } })[1] !== 7;\n});\n\nvar check = function (it) {\n  return it && it.Math === Math && it;\n};\n\n// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028\nvar global$c =\n  // eslint-disable-next-line es/no-global-this -- safe\n  check(typeof globalThis == 'object' && globalThis) ||\n  check(typeof window == 'object' && window) ||\n  // eslint-disable-next-line no-restricted-globals -- safe\n  check(typeof self == 'object' && self) ||\n  check(typeof commonjsGlobal == 'object' && commonjsGlobal) ||\n  // eslint-disable-next-line no-new-func -- fallback\n  (function () { return this; })() || commonjsGlobal || Function('return this')();\n\nvar isCallable$d = isCallable$e;\nvar $documentAll = documentAll_1;\n\nvar documentAll = $documentAll.all;\n\nvar isObject$6 = $documentAll.IS_HTMLDDA ? function (it) {\n  return typeof it == 'object' ? it !== null : isCallable$d(it) || it === documentAll;\n} : function (it) {\n  return typeof it == 'object' ? it !== null : isCallable$d(it);\n};\n\nvar global$b = global$c;\nvar isObject$5 = isObject$6;\n\nvar document$1 = global$b.document;\n// typeof document.createElement is 'object' in old IE\nvar EXISTS$1 = isObject$5(document$1) && isObject$5(document$1.createElement);\n\nvar documentCreateElement = function (it) {\n  return EXISTS$1 ? document$1.createElement(it) : {};\n};\n\nvar DESCRIPTORS$9 = descriptors;\nvar fails$9 = fails$b;\nvar createElement = documentCreateElement;\n\n// Thanks to IE8 for its funny defineProperty\nvar ie8DomDefine = !DESCRIPTORS$9 && !fails$9(function () {\n  // eslint-disable-next-line es/no-object-defineproperty -- required for testing\n  return Object.defineProperty(createElement('div'), 'a', {\n    get: function () { return 7; }\n  }).a !== 7;\n});\n\nvar DESCRIPTORS$8 = descriptors;\nvar fails$8 = fails$b;\n\n// V8 ~ Chrome 36-\n// https://bugs.chromium.org/p/v8/issues/detail?id=3334\nvar v8PrototypeDefineBug = DESCRIPTORS$8 && fails$8(function () {\n  // eslint-disable-next-line es/no-object-defineproperty -- required for testing\n  return Object.defineProperty(function () { /* empty */ }, 'prototype', {\n    value: 42,\n    writable: false\n  }).prototype !== 42;\n});\n\nvar isObject$4 = isObject$6;\n\nvar $String$5 = String;\nvar $TypeError$8 = TypeError;\n\n// `Assert: Type(argument) is Object`\nvar anObject$3 = function (argument) {\n  if (isObject$4(argument)) return argument;\n  throw new $TypeError$8($String$5(argument) + ' is not an object');\n};\n\nvar fails$7 = fails$b;\n\nvar functionBindNative = !fails$7(function () {\n  // eslint-disable-next-line es/no-function-prototype-bind -- safe\n  var test = (function () { /* empty */ }).bind();\n  // eslint-disable-next-line no-prototype-builtins -- safe\n  return typeof test != 'function' || test.hasOwnProperty('prototype');\n});\n\nvar NATIVE_BIND$1 = functionBindNative;\n\nvar call$4 = Function.prototype.call;\n\nvar functionCall = NATIVE_BIND$1 ? call$4.bind(call$4) : function () {\n  return call$4.apply(call$4, arguments);\n};\n\nvar global$a = global$c;\nvar isCallable$c = isCallable$e;\n\nvar aFunction = function (argument) {\n  return isCallable$c(argument) ? argument : undefined;\n};\n\nvar getBuiltIn$3 = function (namespace, method) {\n  return arguments.length < 2 ? aFunction(global$a[namespace]) : global$a[namespace] && global$a[namespace][method];\n};\n\nvar NATIVE_BIND = functionBindNative;\n\nvar FunctionPrototype$1 = Function.prototype;\nvar call$3 = FunctionPrototype$1.call;\nvar uncurryThisWithBind = NATIVE_BIND && FunctionPrototype$1.bind.bind(call$3, call$3);\n\nvar functionUncurryThis = NATIVE_BIND ? uncurryThisWithBind : function (fn) {\n  return function () {\n    return call$3.apply(fn, arguments);\n  };\n};\n\nvar uncurryThis$d = functionUncurryThis;\n\nvar objectIsPrototypeOf = uncurryThis$d({}.isPrototypeOf);\n\nvar engineUserAgent = typeof navigator != 'undefined' && String(navigator.userAgent) || '';\n\nvar global$9 = global$c;\nvar userAgent = engineUserAgent;\n\nvar process = global$9.process;\nvar Deno = global$9.Deno;\nvar versions = process && process.versions || Deno && Deno.version;\nvar v8 = versions && versions.v8;\nvar match, version;\n\nif (v8) {\n  match = v8.split('.');\n  // in old Chrome, versions of V8 isn't V8 = Chrome / 10\n  // but their correct versions are not interesting for us\n  version = match[0] > 0 && match[0] < 4 ? 1 : +(match[0] + match[1]);\n}\n\n// BrowserFS NodeJS `process` polyfill incorrectly set `.v8` to `0.0`\n// so check `userAgent` even if `.v8` exists, but 0\nif (!version && userAgent) {\n  match = userAgent.match(/Edge\\/(\\d+)/);\n  if (!match || match[1] >= 74) {\n    match = userAgent.match(/Chrome\\/(\\d+)/);\n    if (match) version = +match[1];\n  }\n}\n\nvar engineV8Version = version;\n\n/* eslint-disable es/no-symbol -- required for testing */\nvar V8_VERSION = engineV8Version;\nvar fails$6 = fails$b;\nvar global$8 = global$c;\n\nvar $String$4 = global$8.String;\n\n// eslint-disable-next-line es/no-object-getownpropertysymbols -- required for testing\nvar symbolConstructorDetection = !!Object.getOwnPropertySymbols && !fails$6(function () {\n  var symbol = Symbol('symbol detection');\n  // Chrome 38 Symbol has incorrect toString conversion\n  // `get-own-property-symbols` polyfill symbols converted to object are not Symbol instances\n  // nb: Do not call `String` directly to avoid this being optimized out to `symbol+''` which will,\n  // of course, fail.\n  return !$String$4(symbol) || !(Object(symbol) instanceof Symbol) ||\n    // Chrome 38-40 symbols are not inherited from DOM collections prototypes to instances\n    !Symbol.sham && V8_VERSION && V8_VERSION < 41;\n});\n\n/* eslint-disable es/no-symbol -- required for testing */\nvar NATIVE_SYMBOL$1 = symbolConstructorDetection;\n\nvar useSymbolAsUid = NATIVE_SYMBOL$1\n  && !Symbol.sham\n  && typeof Symbol.iterator == 'symbol';\n\nvar getBuiltIn$2 = getBuiltIn$3;\nvar isCallable$b = isCallable$e;\nvar isPrototypeOf$1 = objectIsPrototypeOf;\nvar USE_SYMBOL_AS_UID$1 = useSymbolAsUid;\n\nvar $Object$4 = Object;\n\nvar isSymbol$2 = USE_SYMBOL_AS_UID$1 ? function (it) {\n  return typeof it == 'symbol';\n} : function (it) {\n  var $Symbol = getBuiltIn$2('Symbol');\n  return isCallable$b($Symbol) && isPrototypeOf$1($Symbol.prototype, $Object$4(it));\n};\n\nvar $String$3 = String;\n\nvar tryToString$2 = function (argument) {\n  try {\n    return $String$3(argument);\n  } catch (error) {\n    return 'Object';\n  }\n};\n\nvar isCallable$a = isCallable$e;\nvar tryToString$1 = tryToString$2;\n\nvar $TypeError$7 = TypeError;\n\n// `Assert: IsCallable(argument) is true`\nvar aCallable$3 = function (argument) {\n  if (isCallable$a(argument)) return argument;\n  throw new $TypeError$7(tryToString$1(argument) + ' is not a function');\n};\n\n// we can't use just `it == null` since of `document.all` special case\n// https://tc39.es/ecma262/#sec-IsHTMLDDA-internal-slot-aec\nvar isNullOrUndefined$2 = function (it) {\n  return it === null || it === undefined;\n};\n\nvar aCallable$2 = aCallable$3;\nvar isNullOrUndefined$1 = isNullOrUndefined$2;\n\n// `GetMethod` abstract operation\n// https://tc39.es/ecma262/#sec-getmethod\nvar getMethod$1 = function (V, P) {\n  var func = V[P];\n  return isNullOrUndefined$1(func) ? undefined : aCallable$2(func);\n};\n\nvar call$2 = functionCall;\nvar isCallable$9 = isCallable$e;\nvar isObject$3 = isObject$6;\n\nvar $TypeError$6 = TypeError;\n\n// `OrdinaryToPrimitive` abstract operation\n// https://tc39.es/ecma262/#sec-ordinarytoprimitive\nvar ordinaryToPrimitive$1 = function (input, pref) {\n  var fn, val;\n  if (pref === 'string' && isCallable$9(fn = input.toString) && !isObject$3(val = call$2(fn, input))) return val;\n  if (isCallable$9(fn = input.valueOf) && !isObject$3(val = call$2(fn, input))) return val;\n  if (pref !== 'string' && isCallable$9(fn = input.toString) && !isObject$3(val = call$2(fn, input))) return val;\n  throw new $TypeError$6(\"Can't convert object to primitive value\");\n};\n\nvar shared$3 = {exports: {}};\n\nvar isPure = false;\n\nvar global$7 = global$c;\n\n// eslint-disable-next-line es/no-object-defineproperty -- safe\nvar defineProperty$2 = Object.defineProperty;\n\nvar defineGlobalProperty$3 = function (key, value) {\n  try {\n    defineProperty$2(global$7, key, { value: value, configurable: true, writable: true });\n  } catch (error) {\n    global$7[key] = value;\n  } return value;\n};\n\nvar global$6 = global$c;\nvar defineGlobalProperty$2 = defineGlobalProperty$3;\n\nvar SHARED = '__core-js_shared__';\nvar store$3 = global$6[SHARED] || defineGlobalProperty$2(SHARED, {});\n\nvar sharedStore = store$3;\n\nvar store$2 = sharedStore;\n\n(shared$3.exports = function (key, value) {\n  return store$2[key] || (store$2[key] = value !== undefined ? value : {});\n})('versions', []).push({\n  version: '3.33.2',\n  mode: 'global',\n  copyright: '© 2014-2023 Denis Pushkarev (zloirock.ru)',\n  license: 'https://github.com/zloirock/core-js/blob/v3.33.2/LICENSE',\n  source: 'https://github.com/zloirock/core-js'\n});\n\nvar sharedExports = shared$3.exports;\n\nvar isNullOrUndefined = isNullOrUndefined$2;\n\nvar $TypeError$5 = TypeError;\n\n// `RequireObjectCoercible` abstract operation\n// https://tc39.es/ecma262/#sec-requireobjectcoercible\nvar requireObjectCoercible$2 = function (it) {\n  if (isNullOrUndefined(it)) throw new $TypeError$5(\"Can't call method on \" + it);\n  return it;\n};\n\nvar requireObjectCoercible$1 = requireObjectCoercible$2;\n\nvar $Object$3 = Object;\n\n// `ToObject` abstract operation\n// https://tc39.es/ecma262/#sec-toobject\nvar toObject$2 = function (argument) {\n  return $Object$3(requireObjectCoercible$1(argument));\n};\n\nvar uncurryThis$c = functionUncurryThis;\nvar toObject$1 = toObject$2;\n\nvar hasOwnProperty = uncurryThis$c({}.hasOwnProperty);\n\n// `HasOwnProperty` abstract operation\n// https://tc39.es/ecma262/#sec-hasownproperty\n// eslint-disable-next-line es/no-object-hasown -- safe\nvar hasOwnProperty_1 = Object.hasOwn || function hasOwn(it, key) {\n  return hasOwnProperty(toObject$1(it), key);\n};\n\nvar uncurryThis$b = functionUncurryThis;\n\nvar id = 0;\nvar postfix = Math.random();\nvar toString$5 = uncurryThis$b(1.0.toString);\n\nvar uid$3 = function (key) {\n  return 'Symbol(' + (key === undefined ? '' : key) + ')_' + toString$5(++id + postfix, 36);\n};\n\nvar global$5 = global$c;\nvar shared$2 = sharedExports;\nvar hasOwn$8 = hasOwnProperty_1;\nvar uid$2 = uid$3;\nvar NATIVE_SYMBOL = symbolConstructorDetection;\nvar USE_SYMBOL_AS_UID = useSymbolAsUid;\n\nvar Symbol$1 = global$5.Symbol;\nvar WellKnownSymbolsStore = shared$2('wks');\nvar createWellKnownSymbol = USE_SYMBOL_AS_UID ? Symbol$1['for'] || Symbol$1 : Symbol$1 && Symbol$1.withoutSetter || uid$2;\n\nvar wellKnownSymbol$5 = function (name) {\n  if (!hasOwn$8(WellKnownSymbolsStore, name)) {\n    WellKnownSymbolsStore[name] = NATIVE_SYMBOL && hasOwn$8(Symbol$1, name)\n      ? Symbol$1[name]\n      : createWellKnownSymbol('Symbol.' + name);\n  } return WellKnownSymbolsStore[name];\n};\n\nvar call$1 = functionCall;\nvar isObject$2 = isObject$6;\nvar isSymbol$1 = isSymbol$2;\nvar getMethod = getMethod$1;\nvar ordinaryToPrimitive = ordinaryToPrimitive$1;\nvar wellKnownSymbol$4 = wellKnownSymbol$5;\n\nvar $TypeError$4 = TypeError;\nvar TO_PRIMITIVE = wellKnownSymbol$4('toPrimitive');\n\n// `ToPrimitive` abstract operation\n// https://tc39.es/ecma262/#sec-toprimitive\nvar toPrimitive$2 = function (input, pref) {\n  if (!isObject$2(input) || isSymbol$1(input)) return input;\n  var exoticToPrim = getMethod(input, TO_PRIMITIVE);\n  var result;\n  if (exoticToPrim) {\n    if (pref === undefined) pref = 'default';\n    result = call$1(exoticToPrim, input, pref);\n    if (!isObject$2(result) || isSymbol$1(result)) return result;\n    throw new $TypeError$4(\"Can't convert object to primitive value\");\n  }\n  if (pref === undefined) pref = 'number';\n  return ordinaryToPrimitive(input, pref);\n};\n\nvar toPrimitive$1 = toPrimitive$2;\nvar isSymbol = isSymbol$2;\n\n// `ToPropertyKey` abstract operation\n// https://tc39.es/ecma262/#sec-topropertykey\nvar toPropertyKey$2 = function (argument) {\n  var key = toPrimitive$1(argument, 'string');\n  return isSymbol(key) ? key : key + '';\n};\n\nvar DESCRIPTORS$7 = descriptors;\nvar IE8_DOM_DEFINE$1 = ie8DomDefine;\nvar V8_PROTOTYPE_DEFINE_BUG = v8PrototypeDefineBug;\nvar anObject$2 = anObject$3;\nvar toPropertyKey$1 = toPropertyKey$2;\n\nvar $TypeError$3 = TypeError;\n// eslint-disable-next-line es/no-object-defineproperty -- safe\nvar $defineProperty = Object.defineProperty;\n// eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe\nvar $getOwnPropertyDescriptor$1 = Object.getOwnPropertyDescriptor;\nvar ENUMERABLE = 'enumerable';\nvar CONFIGURABLE$1 = 'configurable';\nvar WRITABLE = 'writable';\n\n// `Object.defineProperty` method\n// https://tc39.es/ecma262/#sec-object.defineproperty\nobjectDefineProperty.f = DESCRIPTORS$7 ? V8_PROTOTYPE_DEFINE_BUG ? function defineProperty(O, P, Attributes) {\n  anObject$2(O);\n  P = toPropertyKey$1(P);\n  anObject$2(Attributes);\n  if (typeof O === 'function' && P === 'prototype' && 'value' in Attributes && WRITABLE in Attributes && !Attributes[WRITABLE]) {\n    var current = $getOwnPropertyDescriptor$1(O, P);\n    if (current && current[WRITABLE]) {\n      O[P] = Attributes.value;\n      Attributes = {\n        configurable: CONFIGURABLE$1 in Attributes ? Attributes[CONFIGURABLE$1] : current[CONFIGURABLE$1],\n        enumerable: ENUMERABLE in Attributes ? Attributes[ENUMERABLE] : current[ENUMERABLE],\n        writable: false\n      };\n    }\n  } return $defineProperty(O, P, Attributes);\n} : $defineProperty : function defineProperty(O, P, Attributes) {\n  anObject$2(O);\n  P = toPropertyKey$1(P);\n  anObject$2(Attributes);\n  if (IE8_DOM_DEFINE$1) try {\n    return $defineProperty(O, P, Attributes);\n  } catch (error) { /* empty */ }\n  if ('get' in Attributes || 'set' in Attributes) throw new $TypeError$3('Accessors not supported');\n  if ('value' in Attributes) O[P] = Attributes.value;\n  return O;\n};\n\nvar makeBuiltIn$3 = {exports: {}};\n\nvar DESCRIPTORS$6 = descriptors;\nvar hasOwn$7 = hasOwnProperty_1;\n\nvar FunctionPrototype = Function.prototype;\n// eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe\nvar getDescriptor = DESCRIPTORS$6 && Object.getOwnPropertyDescriptor;\n\nvar EXISTS = hasOwn$7(FunctionPrototype, 'name');\n// additional protection from minified / mangled / dropped function names\nvar PROPER = EXISTS && (function something() { /* empty */ }).name === 'something';\nvar CONFIGURABLE = EXISTS && (!DESCRIPTORS$6 || (DESCRIPTORS$6 && getDescriptor(FunctionPrototype, 'name').configurable));\n\nvar functionName = {\n  EXISTS: EXISTS,\n  PROPER: PROPER,\n  CONFIGURABLE: CONFIGURABLE\n};\n\nvar uncurryThis$a = functionUncurryThis;\nvar isCallable$8 = isCallable$e;\nvar store$1 = sharedStore;\n\nvar functionToString = uncurryThis$a(Function.toString);\n\n// this helper broken in `core-js@3.4.1-3.4.4`, so we can't use `shared` helper\nif (!isCallable$8(store$1.inspectSource)) {\n  store$1.inspectSource = function (it) {\n    return functionToString(it);\n  };\n}\n\nvar inspectSource$1 = store$1.inspectSource;\n\nvar global$4 = global$c;\nvar isCallable$7 = isCallable$e;\n\nvar WeakMap$1 = global$4.WeakMap;\n\nvar weakMapBasicDetection = isCallable$7(WeakMap$1) && /native code/.test(String(WeakMap$1));\n\nvar createPropertyDescriptor$2 = function (bitmap, value) {\n  return {\n    enumerable: !(bitmap & 1),\n    configurable: !(bitmap & 2),\n    writable: !(bitmap & 4),\n    value: value\n  };\n};\n\nvar DESCRIPTORS$5 = descriptors;\nvar definePropertyModule$2 = objectDefineProperty;\nvar createPropertyDescriptor$1 = createPropertyDescriptor$2;\n\nvar createNonEnumerableProperty$3 = DESCRIPTORS$5 ? function (object, key, value) {\n  return definePropertyModule$2.f(object, key, createPropertyDescriptor$1(1, value));\n} : function (object, key, value) {\n  object[key] = value;\n  return object;\n};\n\nvar shared$1 = sharedExports;\nvar uid$1 = uid$3;\n\nvar keys = shared$1('keys');\n\nvar sharedKey$2 = function (key) {\n  return keys[key] || (keys[key] = uid$1(key));\n};\n\nvar hiddenKeys$3 = {};\n\nvar NATIVE_WEAK_MAP = weakMapBasicDetection;\nvar global$3 = global$c;\nvar isObject$1 = isObject$6;\nvar createNonEnumerableProperty$2 = createNonEnumerableProperty$3;\nvar hasOwn$6 = hasOwnProperty_1;\nvar shared = sharedStore;\nvar sharedKey$1 = sharedKey$2;\nvar hiddenKeys$2 = hiddenKeys$3;\n\nvar OBJECT_ALREADY_INITIALIZED = 'Object already initialized';\nvar TypeError$2 = global$3.TypeError;\nvar WeakMap = global$3.WeakMap;\nvar set, get, has;\n\nvar enforce = function (it) {\n  return has(it) ? get(it) : set(it, {});\n};\n\nvar getterFor = function (TYPE) {\n  return function (it) {\n    var state;\n    if (!isObject$1(it) || (state = get(it)).type !== TYPE) {\n      throw new TypeError$2('Incompatible receiver, ' + TYPE + ' required');\n    } return state;\n  };\n};\n\nif (NATIVE_WEAK_MAP || shared.state) {\n  var store = shared.state || (shared.state = new WeakMap());\n  /* eslint-disable no-self-assign -- prototype methods protection */\n  store.get = store.get;\n  store.has = store.has;\n  store.set = store.set;\n  /* eslint-enable no-self-assign -- prototype methods protection */\n  set = function (it, metadata) {\n    if (store.has(it)) throw new TypeError$2(OBJECT_ALREADY_INITIALIZED);\n    metadata.facade = it;\n    store.set(it, metadata);\n    return metadata;\n  };\n  get = function (it) {\n    return store.get(it) || {};\n  };\n  has = function (it) {\n    return store.has(it);\n  };\n} else {\n  var STATE = sharedKey$1('state');\n  hiddenKeys$2[STATE] = true;\n  set = function (it, metadata) {\n    if (hasOwn$6(it, STATE)) throw new TypeError$2(OBJECT_ALREADY_INITIALIZED);\n    metadata.facade = it;\n    createNonEnumerableProperty$2(it, STATE, metadata);\n    return metadata;\n  };\n  get = function (it) {\n    return hasOwn$6(it, STATE) ? it[STATE] : {};\n  };\n  has = function (it) {\n    return hasOwn$6(it, STATE);\n  };\n}\n\nvar internalState = {\n  set: set,\n  get: get,\n  has: has,\n  enforce: enforce,\n  getterFor: getterFor\n};\n\nvar uncurryThis$9 = functionUncurryThis;\nvar fails$5 = fails$b;\nvar isCallable$6 = isCallable$e;\nvar hasOwn$5 = hasOwnProperty_1;\nvar DESCRIPTORS$4 = descriptors;\nvar CONFIGURABLE_FUNCTION_NAME = functionName.CONFIGURABLE;\nvar inspectSource = inspectSource$1;\nvar InternalStateModule$1 = internalState;\n\nvar enforceInternalState$1 = InternalStateModule$1.enforce;\nvar getInternalState$1 = InternalStateModule$1.get;\nvar $String$2 = String;\n// eslint-disable-next-line es/no-object-defineproperty -- safe\nvar defineProperty$1 = Object.defineProperty;\nvar stringSlice$1 = uncurryThis$9(''.slice);\nvar replace = uncurryThis$9(''.replace);\nvar join = uncurryThis$9([].join);\n\nvar CONFIGURABLE_LENGTH = DESCRIPTORS$4 && !fails$5(function () {\n  return defineProperty$1(function () { /* empty */ }, 'length', { value: 8 }).length !== 8;\n});\n\nvar TEMPLATE = String(String).split('String');\n\nvar makeBuiltIn$2 = makeBuiltIn$3.exports = function (value, name, options) {\n  if (stringSlice$1($String$2(name), 0, 7) === 'Symbol(') {\n    name = '[' + replace($String$2(name), /^Symbol\\(([^)]*)\\)/, '$1') + ']';\n  }\n  if (options && options.getter) name = 'get ' + name;\n  if (options && options.setter) name = 'set ' + name;\n  if (!hasOwn$5(value, 'name') || (CONFIGURABLE_FUNCTION_NAME && value.name !== name)) {\n    if (DESCRIPTORS$4) defineProperty$1(value, 'name', { value: name, configurable: true });\n    else value.name = name;\n  }\n  if (CONFIGURABLE_LENGTH && options && hasOwn$5(options, 'arity') && value.length !== options.arity) {\n    defineProperty$1(value, 'length', { value: options.arity });\n  }\n  try {\n    if (options && hasOwn$5(options, 'constructor') && options.constructor) {\n      if (DESCRIPTORS$4) defineProperty$1(value, 'prototype', { writable: false });\n    // in V8 ~ Chrome 53, prototypes of some methods, like `Array.prototype.values`, are non-writable\n    } else if (value.prototype) value.prototype = undefined;\n  } catch (error) { /* empty */ }\n  var state = enforceInternalState$1(value);\n  if (!hasOwn$5(state, 'source')) {\n    state.source = join(TEMPLATE, typeof name == 'string' ? name : '');\n  } return value;\n};\n\n// add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative\n// eslint-disable-next-line no-extend-native -- required\nFunction.prototype.toString = makeBuiltIn$2(function toString() {\n  return isCallable$6(this) && getInternalState$1(this).source || inspectSource(this);\n}, 'toString');\n\nvar makeBuiltInExports = makeBuiltIn$3.exports;\n\nvar isCallable$5 = isCallable$e;\nvar definePropertyModule$1 = objectDefineProperty;\nvar makeBuiltIn$1 = makeBuiltInExports;\nvar defineGlobalProperty$1 = defineGlobalProperty$3;\n\nvar defineBuiltIn$4 = function (O, key, value, options) {\n  if (!options) options = {};\n  var simple = options.enumerable;\n  var name = options.name !== undefined ? options.name : key;\n  if (isCallable$5(value)) makeBuiltIn$1(value, name, options);\n  if (options.global) {\n    if (simple) O[key] = value;\n    else defineGlobalProperty$1(key, value);\n  } else {\n    try {\n      if (!options.unsafe) delete O[key];\n      else if (O[key]) simple = true;\n    } catch (error) { /* empty */ }\n    if (simple) O[key] = value;\n    else definePropertyModule$1.f(O, key, {\n      value: value,\n      enumerable: false,\n      configurable: !options.nonConfigurable,\n      writable: !options.nonWritable\n    });\n  } return O;\n};\n\nvar wellKnownSymbol$3 = wellKnownSymbol$5;\n\nvar TO_STRING_TAG$2 = wellKnownSymbol$3('toStringTag');\nvar test = {};\n\ntest[TO_STRING_TAG$2] = 'z';\n\nvar toStringTagSupport = String(test) === '[object z]';\n\nvar uncurryThis$8 = functionUncurryThis;\n\nvar toString$4 = uncurryThis$8({}.toString);\nvar stringSlice = uncurryThis$8(''.slice);\n\nvar classofRaw$1 = function (it) {\n  return stringSlice(toString$4(it), 8, -1);\n};\n\nvar TO_STRING_TAG_SUPPORT = toStringTagSupport;\nvar isCallable$4 = isCallable$e;\nvar classofRaw = classofRaw$1;\nvar wellKnownSymbol$2 = wellKnownSymbol$5;\n\nvar TO_STRING_TAG$1 = wellKnownSymbol$2('toStringTag');\nvar $Object$2 = Object;\n\n// ES3 wrong here\nvar CORRECT_ARGUMENTS = classofRaw(function () { return arguments; }()) === 'Arguments';\n\n// fallback for IE11 Script Access Denied error\nvar tryGet = function (it, key) {\n  try {\n    return it[key];\n  } catch (error) { /* empty */ }\n};\n\n// getting tag from ES6+ `Object.prototype.toString`\nvar classof$4 = TO_STRING_TAG_SUPPORT ? classofRaw : function (it) {\n  var O, tag, result;\n  return it === undefined ? 'Undefined' : it === null ? 'Null'\n    // @@toStringTag case\n    : typeof (tag = tryGet(O = $Object$2(it), TO_STRING_TAG$1)) == 'string' ? tag\n    // builtinTag case\n    : CORRECT_ARGUMENTS ? classofRaw(O)\n    // ES3 arguments fallback\n    : (result = classofRaw(O)) === 'Object' && isCallable$4(O.callee) ? 'Arguments' : result;\n};\n\nvar classof$3 = classof$4;\n\nvar $String$1 = String;\n\nvar toString$3 = function (argument) {\n  if (classof$3(argument) === 'Symbol') throw new TypeError('Cannot convert a Symbol value to a string');\n  return $String$1(argument);\n};\n\nvar $TypeError$2 = TypeError;\n\nvar validateArgumentsLength$3 = function (passed, required) {\n  if (passed < required) throw new $TypeError$2('Not enough arguments');\n  return passed;\n};\n\nvar defineBuiltIn$3 = defineBuiltIn$4;\nvar uncurryThis$7 = functionUncurryThis;\nvar toString$2 = toString$3;\nvar validateArgumentsLength$2 = validateArgumentsLength$3;\n\nvar $URLSearchParams$1 = URLSearchParams;\nvar URLSearchParamsPrototype$2 = $URLSearchParams$1.prototype;\nvar append = uncurryThis$7(URLSearchParamsPrototype$2.append);\nvar $delete = uncurryThis$7(URLSearchParamsPrototype$2['delete']);\nvar forEach$1 = uncurryThis$7(URLSearchParamsPrototype$2.forEach);\nvar push$1 = uncurryThis$7([].push);\nvar params$1 = new $URLSearchParams$1('a=1&a=2&b=3');\n\nparams$1['delete']('a', 1);\n// `undefined` case is a Chromium 117 bug\n// https://bugs.chromium.org/p/v8/issues/detail?id=14222\nparams$1['delete']('b', undefined);\n\nif (params$1 + '' !== 'a=2') {\n  defineBuiltIn$3(URLSearchParamsPrototype$2, 'delete', function (name /* , value */) {\n    var length = arguments.length;\n    var $value = length < 2 ? undefined : arguments[1];\n    if (length && $value === undefined) return $delete(this, name);\n    var entries = [];\n    forEach$1(this, function (v, k) { // also validates `this`\n      push$1(entries, { key: k, value: v });\n    });\n    validateArgumentsLength$2(length, 1);\n    var key = toString$2(name);\n    var value = toString$2($value);\n    var index = 0;\n    var dindex = 0;\n    var found = false;\n    var entriesLength = entries.length;\n    var entry;\n    while (index < entriesLength) {\n      entry = entries[index++];\n      if (found || entry.key === key) {\n        found = true;\n        $delete(this, entry.key);\n      } else dindex++;\n    }\n    while (dindex < entriesLength) {\n      entry = entries[dindex++];\n      if (!(entry.key === key && entry.value === value)) append(this, entry.key, entry.value);\n    }\n  }, { enumerable: true, unsafe: true });\n}\n\nvar defineBuiltIn$2 = defineBuiltIn$4;\nvar uncurryThis$6 = functionUncurryThis;\nvar toString$1 = toString$3;\nvar validateArgumentsLength$1 = validateArgumentsLength$3;\n\nvar $URLSearchParams = URLSearchParams;\nvar URLSearchParamsPrototype$1 = $URLSearchParams.prototype;\nvar getAll = uncurryThis$6(URLSearchParamsPrototype$1.getAll);\nvar $has = uncurryThis$6(URLSearchParamsPrototype$1.has);\nvar params = new $URLSearchParams('a=1');\n\n// `undefined` case is a Chromium 117 bug\n// https://bugs.chromium.org/p/v8/issues/detail?id=14222\nif (params.has('a', 2) || !params.has('a', undefined)) {\n  defineBuiltIn$2(URLSearchParamsPrototype$1, 'has', function has(name /* , value */) {\n    var length = arguments.length;\n    var $value = length < 2 ? undefined : arguments[1];\n    if (length && $value === undefined) return $has(this, name);\n    var values = getAll(this, name); // also validates `this`\n    validateArgumentsLength$1(length, 1);\n    var value = toString$1($value);\n    var index = 0;\n    while (index < values.length) {\n      if (values[index++] === value) return true;\n    } return false;\n  }, { enumerable: true, unsafe: true });\n}\n\nvar makeBuiltIn = makeBuiltInExports;\nvar defineProperty = objectDefineProperty;\n\nvar defineBuiltInAccessor$2 = function (target, name, descriptor) {\n  if (descriptor.get) makeBuiltIn(descriptor.get, name, { getter: true });\n  if (descriptor.set) makeBuiltIn(descriptor.set, name, { setter: true });\n  return defineProperty.f(target, name, descriptor);\n};\n\nvar DESCRIPTORS$3 = descriptors;\nvar uncurryThis$5 = functionUncurryThis;\nvar defineBuiltInAccessor$1 = defineBuiltInAccessor$2;\n\nvar URLSearchParamsPrototype = URLSearchParams.prototype;\nvar forEach = uncurryThis$5(URLSearchParamsPrototype.forEach);\n\n// `URLSearchParams.prototype.size` getter\n// https://github.com/whatwg/url/pull/734\nif (DESCRIPTORS$3 && !('size' in URLSearchParamsPrototype)) {\n  defineBuiltInAccessor$1(URLSearchParamsPrototype, 'size', {\n    get: function size() {\n      var count = 0;\n      forEach(this, function () { count++; });\n      return count;\n    },\n    configurable: true,\n    enumerable: true\n  });\n}\n\nvar objectGetOwnPropertyDescriptor = {};\n\nvar objectPropertyIsEnumerable = {};\n\nvar $propertyIsEnumerable = {}.propertyIsEnumerable;\n// eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe\nvar getOwnPropertyDescriptor$1 = Object.getOwnPropertyDescriptor;\n\n// Nashorn ~ JDK8 bug\nvar NASHORN_BUG = getOwnPropertyDescriptor$1 && !$propertyIsEnumerable.call({ 1: 2 }, 1);\n\n// `Object.prototype.propertyIsEnumerable` method implementation\n// https://tc39.es/ecma262/#sec-object.prototype.propertyisenumerable\nobjectPropertyIsEnumerable.f = NASHORN_BUG ? function propertyIsEnumerable(V) {\n  var descriptor = getOwnPropertyDescriptor$1(this, V);\n  return !!descriptor && descriptor.enumerable;\n} : $propertyIsEnumerable;\n\nvar uncurryThis$4 = functionUncurryThis;\nvar fails$4 = fails$b;\nvar classof$2 = classofRaw$1;\n\nvar $Object$1 = Object;\nvar split = uncurryThis$4(''.split);\n\n// fallback for non-array-like ES3 and non-enumerable old V8 strings\nvar indexedObject = fails$4(function () {\n  // throws an error in rhino, see https://github.com/mozilla/rhino/issues/346\n  // eslint-disable-next-line no-prototype-builtins -- safe\n  return !$Object$1('z').propertyIsEnumerable(0);\n}) ? function (it) {\n  return classof$2(it) === 'String' ? split(it, '') : $Object$1(it);\n} : $Object$1;\n\n// toObject with fallback for non-array-like ES3 strings\nvar IndexedObject = indexedObject;\nvar requireObjectCoercible = requireObjectCoercible$2;\n\nvar toIndexedObject$3 = function (it) {\n  return IndexedObject(requireObjectCoercible(it));\n};\n\nvar DESCRIPTORS$2 = descriptors;\nvar call = functionCall;\nvar propertyIsEnumerableModule = objectPropertyIsEnumerable;\nvar createPropertyDescriptor = createPropertyDescriptor$2;\nvar toIndexedObject$2 = toIndexedObject$3;\nvar toPropertyKey = toPropertyKey$2;\nvar hasOwn$4 = hasOwnProperty_1;\nvar IE8_DOM_DEFINE = ie8DomDefine;\n\n// eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe\nvar $getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;\n\n// `Object.getOwnPropertyDescriptor` method\n// https://tc39.es/ecma262/#sec-object.getownpropertydescriptor\nobjectGetOwnPropertyDescriptor.f = DESCRIPTORS$2 ? $getOwnPropertyDescriptor : function getOwnPropertyDescriptor(O, P) {\n  O = toIndexedObject$2(O);\n  P = toPropertyKey(P);\n  if (IE8_DOM_DEFINE) try {\n    return $getOwnPropertyDescriptor(O, P);\n  } catch (error) { /* empty */ }\n  if (hasOwn$4(O, P)) return createPropertyDescriptor(!call(propertyIsEnumerableModule.f, O, P), O[P]);\n};\n\nvar objectGetOwnPropertyNames = {};\n\nvar ceil = Math.ceil;\nvar floor = Math.floor;\n\n// `Math.trunc` method\n// https://tc39.es/ecma262/#sec-math.trunc\n// eslint-disable-next-line es/no-math-trunc -- safe\nvar mathTrunc = Math.trunc || function trunc(x) {\n  var n = +x;\n  return (n > 0 ? floor : ceil)(n);\n};\n\nvar trunc = mathTrunc;\n\n// `ToIntegerOrInfinity` abstract operation\n// https://tc39.es/ecma262/#sec-tointegerorinfinity\nvar toIntegerOrInfinity$4 = function (argument) {\n  var number = +argument;\n  // eslint-disable-next-line no-self-compare -- NaN check\n  return number !== number || number === 0 ? 0 : trunc(number);\n};\n\nvar toIntegerOrInfinity$3 = toIntegerOrInfinity$4;\n\nvar max = Math.max;\nvar min$1 = Math.min;\n\n// Helper for a popular repeating case of the spec:\n// Let integer be ? ToInteger(index).\n// If integer < 0, let result be max((length + integer), 0); else let result be min(integer, length).\nvar toAbsoluteIndex$1 = function (index, length) {\n  var integer = toIntegerOrInfinity$3(index);\n  return integer < 0 ? max(integer + length, 0) : min$1(integer, length);\n};\n\nvar toIntegerOrInfinity$2 = toIntegerOrInfinity$4;\n\nvar min = Math.min;\n\n// `ToLength` abstract operation\n// https://tc39.es/ecma262/#sec-tolength\nvar toLength$1 = function (argument) {\n  return argument > 0 ? min(toIntegerOrInfinity$2(argument), 0x1FFFFFFFFFFFFF) : 0; // 2 ** 53 - 1 == 9007199254740991\n};\n\nvar toLength = toLength$1;\n\n// `LengthOfArrayLike` abstract operation\n// https://tc39.es/ecma262/#sec-lengthofarraylike\nvar lengthOfArrayLike$4 = function (obj) {\n  return toLength(obj.length);\n};\n\nvar toIndexedObject$1 = toIndexedObject$3;\nvar toAbsoluteIndex = toAbsoluteIndex$1;\nvar lengthOfArrayLike$3 = lengthOfArrayLike$4;\n\n// `Array.prototype.{ indexOf, includes }` methods implementation\nvar createMethod = function (IS_INCLUDES) {\n  return function ($this, el, fromIndex) {\n    var O = toIndexedObject$1($this);\n    var length = lengthOfArrayLike$3(O);\n    var index = toAbsoluteIndex(fromIndex, length);\n    var value;\n    // Array#includes uses SameValueZero equality algorithm\n    // eslint-disable-next-line no-self-compare -- NaN check\n    if (IS_INCLUDES && el !== el) while (length > index) {\n      value = O[index++];\n      // eslint-disable-next-line no-self-compare -- NaN check\n      if (value !== value) return true;\n    // Array#indexOf ignores holes, Array#includes - not\n    } else for (;length > index; index++) {\n      if ((IS_INCLUDES || index in O) && O[index] === el) return IS_INCLUDES || index || 0;\n    } return !IS_INCLUDES && -1;\n  };\n};\n\nvar arrayIncludes = {\n  // `Array.prototype.includes` method\n  // https://tc39.es/ecma262/#sec-array.prototype.includes\n  includes: createMethod(true),\n  // `Array.prototype.indexOf` method\n  // https://tc39.es/ecma262/#sec-array.prototype.indexof\n  indexOf: createMethod(false)\n};\n\nvar uncurryThis$3 = functionUncurryThis;\nvar hasOwn$3 = hasOwnProperty_1;\nvar toIndexedObject = toIndexedObject$3;\nvar indexOf = arrayIncludes.indexOf;\nvar hiddenKeys$1 = hiddenKeys$3;\n\nvar push = uncurryThis$3([].push);\n\nvar objectKeysInternal = function (object, names) {\n  var O = toIndexedObject(object);\n  var i = 0;\n  var result = [];\n  var key;\n  for (key in O) !hasOwn$3(hiddenKeys$1, key) && hasOwn$3(O, key) && push(result, key);\n  // Don't enum bug & hidden keys\n  while (names.length > i) if (hasOwn$3(O, key = names[i++])) {\n    ~indexOf(result, key) || push(result, key);\n  }\n  return result;\n};\n\n// IE8- don't enum bug keys\nvar enumBugKeys$1 = [\n  'constructor',\n  'hasOwnProperty',\n  'isPrototypeOf',\n  'propertyIsEnumerable',\n  'toLocaleString',\n  'toString',\n  'valueOf'\n];\n\nvar internalObjectKeys = objectKeysInternal;\nvar enumBugKeys = enumBugKeys$1;\n\nvar hiddenKeys = enumBugKeys.concat('length', 'prototype');\n\n// `Object.getOwnPropertyNames` method\n// https://tc39.es/ecma262/#sec-object.getownpropertynames\n// eslint-disable-next-line es/no-object-getownpropertynames -- safe\nobjectGetOwnPropertyNames.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {\n  return internalObjectKeys(O, hiddenKeys);\n};\n\nvar objectGetOwnPropertySymbols = {};\n\n// eslint-disable-next-line es/no-object-getownpropertysymbols -- safe\nobjectGetOwnPropertySymbols.f = Object.getOwnPropertySymbols;\n\nvar getBuiltIn$1 = getBuiltIn$3;\nvar uncurryThis$2 = functionUncurryThis;\nvar getOwnPropertyNamesModule = objectGetOwnPropertyNames;\nvar getOwnPropertySymbolsModule = objectGetOwnPropertySymbols;\nvar anObject$1 = anObject$3;\n\nvar concat = uncurryThis$2([].concat);\n\n// all object keys, includes non-enumerable and symbols\nvar ownKeys$1 = getBuiltIn$1('Reflect', 'ownKeys') || function ownKeys(it) {\n  var keys = getOwnPropertyNamesModule.f(anObject$1(it));\n  var getOwnPropertySymbols = getOwnPropertySymbolsModule.f;\n  return getOwnPropertySymbols ? concat(keys, getOwnPropertySymbols(it)) : keys;\n};\n\nvar hasOwn$2 = hasOwnProperty_1;\nvar ownKeys = ownKeys$1;\nvar getOwnPropertyDescriptorModule = objectGetOwnPropertyDescriptor;\nvar definePropertyModule = objectDefineProperty;\n\nvar copyConstructorProperties$1 = function (target, source, exceptions) {\n  var keys = ownKeys(source);\n  var defineProperty = definePropertyModule.f;\n  var getOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;\n  for (var i = 0; i < keys.length; i++) {\n    var key = keys[i];\n    if (!hasOwn$2(target, key) && !(exceptions && hasOwn$2(exceptions, key))) {\n      defineProperty(target, key, getOwnPropertyDescriptor(source, key));\n    }\n  }\n};\n\nvar fails$3 = fails$b;\nvar isCallable$3 = isCallable$e;\n\nvar replacement = /#|\\.prototype\\./;\n\nvar isForced$1 = function (feature, detection) {\n  var value = data[normalize(feature)];\n  return value === POLYFILL ? true\n    : value === NATIVE ? false\n    : isCallable$3(detection) ? fails$3(detection)\n    : !!detection;\n};\n\nvar normalize = isForced$1.normalize = function (string) {\n  return String(string).replace(replacement, '.').toLowerCase();\n};\n\nvar data = isForced$1.data = {};\nvar NATIVE = isForced$1.NATIVE = 'N';\nvar POLYFILL = isForced$1.POLYFILL = 'P';\n\nvar isForced_1 = isForced$1;\n\nvar global$2 = global$c;\nvar getOwnPropertyDescriptor = objectGetOwnPropertyDescriptor.f;\nvar createNonEnumerableProperty$1 = createNonEnumerableProperty$3;\nvar defineBuiltIn$1 = defineBuiltIn$4;\nvar defineGlobalProperty = defineGlobalProperty$3;\nvar copyConstructorProperties = copyConstructorProperties$1;\nvar isForced = isForced_1;\n\n/*\n  options.target         - name of the target object\n  options.global         - target is the global object\n  options.stat           - export as static methods of target\n  options.proto          - export as prototype methods of target\n  options.real           - real prototype method for the `pure` version\n  options.forced         - export even if the native feature is available\n  options.bind           - bind methods to the target, required for the `pure` version\n  options.wrap           - wrap constructors to preventing global pollution, required for the `pure` version\n  options.unsafe         - use the simple assignment of property instead of delete + defineProperty\n  options.sham           - add a flag to not completely full polyfills\n  options.enumerable     - export as enumerable property\n  options.dontCallGetSet - prevent calling a getter on target\n  options.name           - the .name of the function if it does not match the key\n*/\nvar _export = function (options, source) {\n  var TARGET = options.target;\n  var GLOBAL = options.global;\n  var STATIC = options.stat;\n  var FORCED, target, key, targetProperty, sourceProperty, descriptor;\n  if (GLOBAL) {\n    target = global$2;\n  } else if (STATIC) {\n    target = global$2[TARGET] || defineGlobalProperty(TARGET, {});\n  } else {\n    target = (global$2[TARGET] || {}).prototype;\n  }\n  if (target) for (key in source) {\n    sourceProperty = source[key];\n    if (options.dontCallGetSet) {\n      descriptor = getOwnPropertyDescriptor(target, key);\n      targetProperty = descriptor && descriptor.value;\n    } else targetProperty = target[key];\n    FORCED = isForced(GLOBAL ? key : TARGET + (STATIC ? '.' : '#') + key, options.forced);\n    // contained in target\n    if (!FORCED && targetProperty !== undefined) {\n      if (typeof sourceProperty == typeof targetProperty) continue;\n      copyConstructorProperties(sourceProperty, targetProperty);\n    }\n    // add a flag to not completely full polyfills\n    if (options.sham || (targetProperty && targetProperty.sham)) {\n      createNonEnumerableProperty$1(sourceProperty, 'sham', true);\n    }\n    defineBuiltIn$1(target, key, sourceProperty, options);\n  }\n};\n\nvar fails$2 = fails$b;\nvar wellKnownSymbol$1 = wellKnownSymbol$5;\nvar DESCRIPTORS$1 = descriptors;\nvar IS_PURE = isPure;\n\nvar ITERATOR = wellKnownSymbol$1('iterator');\n\nvar urlConstructorDetection = !fails$2(function () {\n  // eslint-disable-next-line unicorn/relative-url-style -- required for testing\n  var url = new URL('b?a=1&b=2&c=3', 'http://a');\n  var params = url.searchParams;\n  var params2 = new URLSearchParams('a=1&a=2&b=3');\n  var result = '';\n  url.pathname = 'c%20d';\n  params.forEach(function (value, key) {\n    params['delete']('b');\n    result += key + value;\n  });\n  params2['delete']('a', 2);\n  // `undefined` case is a Chromium 117 bug\n  // https://bugs.chromium.org/p/v8/issues/detail?id=14222\n  params2['delete']('b', undefined);\n  return (IS_PURE && (!url.toJSON || !params2.has('a', 1) || params2.has('a', 2) || !params2.has('a', undefined) || params2.has('b')))\n    || (!params.size && (IS_PURE || !DESCRIPTORS$1))\n    || !params.sort\n    || url.href !== 'http://a/c%20d?a=1&c=3'\n    || params.get('c') !== '3'\n    || String(new URLSearchParams('?a=1')) !== 'a=1'\n    || !params[ITERATOR]\n    // throws in Edge\n    || new URL('https://a@b').username !== 'a'\n    || new URLSearchParams(new URLSearchParams('a=b')).get('a') !== 'b'\n    // not punycoded in Edge\n    || new URL('http://тест').host !== 'xn--e1aybc'\n    // not escaped in Chrome 62-\n    || new URL('http://a#б').hash !== '#%D0%B1'\n    // fails in Chrome 66-\n    || result !== 'a1c3'\n    // throws in Safari\n    || new URL('http://x', undefined).host !== 'x';\n});\n\nvar $ = _export;\nvar getBuiltIn = getBuiltIn$3;\nvar fails$1 = fails$b;\nvar validateArgumentsLength = validateArgumentsLength$3;\nvar toString = toString$3;\nvar USE_NATIVE_URL = urlConstructorDetection;\n\nvar URL$1 = getBuiltIn('URL');\n\n// https://github.com/nodejs/node/issues/47505\n// https://github.com/denoland/deno/issues/18893\nvar THROWS_WITHOUT_ARGUMENTS = USE_NATIVE_URL && fails$1(function () {\n  URL$1.canParse();\n});\n\n// `URL.canParse` method\n// https://url.spec.whatwg.org/#dom-url-canparse\n$({ target: 'URL', stat: true, forced: !THROWS_WITHOUT_ARGUMENTS }, {\n  canParse: function canParse(url) {\n    var length = validateArgumentsLength(arguments.length, 1);\n    var urlString = toString(url);\n    var base = length < 2 || arguments[1] === undefined ? undefined : toString(arguments[1]);\n    try {\n      return !!new URL$1(urlString, base);\n    } catch (error) {\n      return false;\n    }\n  }\n});\n\nclass ConsoleLogger {\n  constructor() {\n    let logLevel = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'info';\n    this.logLevel = logLevel;\n  }\n  trace() {\n    if (['trace'].includes(this.logLevel)) {\n      console.trace(...arguments);\n    }\n  }\n  debug() {\n    if (['trace', 'debug'].includes(this.logLevel)) {\n      console.debug(...arguments);\n    }\n  }\n  info() {\n    if (['trace', 'debug', 'info'].includes(this.logLevel)) {\n      console.log(...arguments);\n    }\n  }\n  warn() {\n    if (['trace', 'debug', 'info', 'warn'].includes(this.logLevel)) {\n      console.warn(...arguments);\n    }\n  }\n  error() {\n    console.error(...arguments);\n  }\n}\n\nvar lengthOfArrayLike$2 = lengthOfArrayLike$4;\n\n// https://tc39.es/proposal-change-array-by-copy/#sec-array.prototype.toReversed\n// https://tc39.es/proposal-change-array-by-copy/#sec-%typedarray%.prototype.toReversed\nvar arrayToReversed$1 = function (O, C) {\n  var len = lengthOfArrayLike$2(O);\n  var A = new C(len);\n  var k = 0;\n  for (; k < len; k++) A[k] = O[len - k - 1];\n  return A;\n};\n\n// eslint-disable-next-line es/no-typed-arrays -- safe\nvar arrayBufferBasicDetection = typeof ArrayBuffer != 'undefined' && typeof DataView != 'undefined';\n\nvar fails = fails$b;\n\nvar correctPrototypeGetter = !fails(function () {\n  function F() { /* empty */ }\n  F.prototype.constructor = null;\n  // eslint-disable-next-line es/no-object-getprototypeof -- required for testing\n  return Object.getPrototypeOf(new F()) !== F.prototype;\n});\n\nvar hasOwn$1 = hasOwnProperty_1;\nvar isCallable$2 = isCallable$e;\nvar toObject = toObject$2;\nvar sharedKey = sharedKey$2;\nvar CORRECT_PROTOTYPE_GETTER = correctPrototypeGetter;\n\nvar IE_PROTO = sharedKey('IE_PROTO');\nvar $Object = Object;\nvar ObjectPrototype$1 = $Object.prototype;\n\n// `Object.getPrototypeOf` method\n// https://tc39.es/ecma262/#sec-object.getprototypeof\n// eslint-disable-next-line es/no-object-getprototypeof -- safe\nvar objectGetPrototypeOf = CORRECT_PROTOTYPE_GETTER ? $Object.getPrototypeOf : function (O) {\n  var object = toObject(O);\n  if (hasOwn$1(object, IE_PROTO)) return object[IE_PROTO];\n  var constructor = object.constructor;\n  if (isCallable$2(constructor) && object instanceof constructor) {\n    return constructor.prototype;\n  } return object instanceof $Object ? ObjectPrototype$1 : null;\n};\n\nvar uncurryThis$1 = functionUncurryThis;\nvar aCallable$1 = aCallable$3;\n\nvar functionUncurryThisAccessor = function (object, key, method) {\n  try {\n    // eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe\n    return uncurryThis$1(aCallable$1(Object.getOwnPropertyDescriptor(object, key)[method]));\n  } catch (error) { /* empty */ }\n};\n\nvar isCallable$1 = isCallable$e;\n\nvar $String = String;\nvar $TypeError$1 = TypeError;\n\nvar aPossiblePrototype$1 = function (argument) {\n  if (typeof argument == 'object' || isCallable$1(argument)) return argument;\n  throw new $TypeError$1(\"Can't set \" + $String(argument) + ' as a prototype');\n};\n\n/* eslint-disable no-proto -- safe */\nvar uncurryThisAccessor = functionUncurryThisAccessor;\nvar anObject = anObject$3;\nvar aPossiblePrototype = aPossiblePrototype$1;\n\n// `Object.setPrototypeOf` method\n// https://tc39.es/ecma262/#sec-object.setprototypeof\n// Works with __proto__ only. Old v8 can't work with null proto objects.\n// eslint-disable-next-line es/no-object-setprototypeof -- safe\nvar objectSetPrototypeOf = Object.setPrototypeOf || ('__proto__' in {} ? function () {\n  var CORRECT_SETTER = false;\n  var test = {};\n  var setter;\n  try {\n    setter = uncurryThisAccessor(Object.prototype, '__proto__', 'set');\n    setter(test, []);\n    CORRECT_SETTER = test instanceof Array;\n  } catch (error) { /* empty */ }\n  return function setPrototypeOf(O, proto) {\n    anObject(O);\n    aPossiblePrototype(proto);\n    if (CORRECT_SETTER) setter(O, proto);\n    else O.__proto__ = proto;\n    return O;\n  };\n}() : undefined);\n\nvar NATIVE_ARRAY_BUFFER = arrayBufferBasicDetection;\nvar DESCRIPTORS = descriptors;\nvar global$1 = global$c;\nvar isCallable = isCallable$e;\nvar isObject = isObject$6;\nvar hasOwn = hasOwnProperty_1;\nvar classof$1 = classof$4;\nvar tryToString = tryToString$2;\nvar createNonEnumerableProperty = createNonEnumerableProperty$3;\nvar defineBuiltIn = defineBuiltIn$4;\nvar defineBuiltInAccessor = defineBuiltInAccessor$2;\nvar isPrototypeOf = objectIsPrototypeOf;\nvar getPrototypeOf = objectGetPrototypeOf;\nvar setPrototypeOf = objectSetPrototypeOf;\nvar wellKnownSymbol = wellKnownSymbol$5;\nvar uid = uid$3;\nvar InternalStateModule = internalState;\n\nvar enforceInternalState = InternalStateModule.enforce;\nvar getInternalState = InternalStateModule.get;\nvar Int8Array$1 = global$1.Int8Array;\nvar Int8ArrayPrototype = Int8Array$1 && Int8Array$1.prototype;\nvar Uint8ClampedArray = global$1.Uint8ClampedArray;\nvar Uint8ClampedArrayPrototype = Uint8ClampedArray && Uint8ClampedArray.prototype;\nvar TypedArray = Int8Array$1 && getPrototypeOf(Int8Array$1);\nvar TypedArrayPrototype = Int8ArrayPrototype && getPrototypeOf(Int8ArrayPrototype);\nvar ObjectPrototype = Object.prototype;\nvar TypeError$1 = global$1.TypeError;\n\nvar TO_STRING_TAG = wellKnownSymbol('toStringTag');\nvar TYPED_ARRAY_TAG = uid('TYPED_ARRAY_TAG');\nvar TYPED_ARRAY_CONSTRUCTOR = 'TypedArrayConstructor';\n// Fixing native typed arrays in Opera Presto crashes the browser, see #595\nvar NATIVE_ARRAY_BUFFER_VIEWS = NATIVE_ARRAY_BUFFER && !!setPrototypeOf && classof$1(global$1.opera) !== 'Opera';\nvar TYPED_ARRAY_TAG_REQUIRED = false;\nvar NAME, Constructor, Prototype;\n\nvar TypedArrayConstructorsList = {\n  Int8Array: 1,\n  Uint8Array: 1,\n  Uint8ClampedArray: 1,\n  Int16Array: 2,\n  Uint16Array: 2,\n  Int32Array: 4,\n  Uint32Array: 4,\n  Float32Array: 4,\n  Float64Array: 8\n};\n\nvar BigIntArrayConstructorsList = {\n  BigInt64Array: 8,\n  BigUint64Array: 8\n};\n\nvar isView = function isView(it) {\n  if (!isObject(it)) return false;\n  var klass = classof$1(it);\n  return klass === 'DataView'\n    || hasOwn(TypedArrayConstructorsList, klass)\n    || hasOwn(BigIntArrayConstructorsList, klass);\n};\n\nvar getTypedArrayConstructor$3 = function (it) {\n  var proto = getPrototypeOf(it);\n  if (!isObject(proto)) return;\n  var state = getInternalState(proto);\n  return (state && hasOwn(state, TYPED_ARRAY_CONSTRUCTOR)) ? state[TYPED_ARRAY_CONSTRUCTOR] : getTypedArrayConstructor$3(proto);\n};\n\nvar isTypedArray = function (it) {\n  if (!isObject(it)) return false;\n  var klass = classof$1(it);\n  return hasOwn(TypedArrayConstructorsList, klass)\n    || hasOwn(BigIntArrayConstructorsList, klass);\n};\n\nvar aTypedArray$3 = function (it) {\n  if (isTypedArray(it)) return it;\n  throw new TypeError$1('Target is not a typed array');\n};\n\nvar aTypedArrayConstructor = function (C) {\n  if (isCallable(C) && (!setPrototypeOf || isPrototypeOf(TypedArray, C))) return C;\n  throw new TypeError$1(tryToString(C) + ' is not a typed array constructor');\n};\n\nvar exportTypedArrayMethod$3 = function (KEY, property, forced, options) {\n  if (!DESCRIPTORS) return;\n  if (forced) for (var ARRAY in TypedArrayConstructorsList) {\n    var TypedArrayConstructor = global$1[ARRAY];\n    if (TypedArrayConstructor && hasOwn(TypedArrayConstructor.prototype, KEY)) try {\n      delete TypedArrayConstructor.prototype[KEY];\n    } catch (error) {\n      // old WebKit bug - some methods are non-configurable\n      try {\n        TypedArrayConstructor.prototype[KEY] = property;\n      } catch (error2) { /* empty */ }\n    }\n  }\n  if (!TypedArrayPrototype[KEY] || forced) {\n    defineBuiltIn(TypedArrayPrototype, KEY, forced ? property\n      : NATIVE_ARRAY_BUFFER_VIEWS && Int8ArrayPrototype[KEY] || property, options);\n  }\n};\n\nvar exportTypedArrayStaticMethod = function (KEY, property, forced) {\n  var ARRAY, TypedArrayConstructor;\n  if (!DESCRIPTORS) return;\n  if (setPrototypeOf) {\n    if (forced) for (ARRAY in TypedArrayConstructorsList) {\n      TypedArrayConstructor = global$1[ARRAY];\n      if (TypedArrayConstructor && hasOwn(TypedArrayConstructor, KEY)) try {\n        delete TypedArrayConstructor[KEY];\n      } catch (error) { /* empty */ }\n    }\n    if (!TypedArray[KEY] || forced) {\n      // V8 ~ Chrome 49-50 `%TypedArray%` methods are non-writable non-configurable\n      try {\n        return defineBuiltIn(TypedArray, KEY, forced ? property : NATIVE_ARRAY_BUFFER_VIEWS && TypedArray[KEY] || property);\n      } catch (error) { /* empty */ }\n    } else return;\n  }\n  for (ARRAY in TypedArrayConstructorsList) {\n    TypedArrayConstructor = global$1[ARRAY];\n    if (TypedArrayConstructor && (!TypedArrayConstructor[KEY] || forced)) {\n      defineBuiltIn(TypedArrayConstructor, KEY, property);\n    }\n  }\n};\n\nfor (NAME in TypedArrayConstructorsList) {\n  Constructor = global$1[NAME];\n  Prototype = Constructor && Constructor.prototype;\n  if (Prototype) enforceInternalState(Prototype)[TYPED_ARRAY_CONSTRUCTOR] = Constructor;\n  else NATIVE_ARRAY_BUFFER_VIEWS = false;\n}\n\nfor (NAME in BigIntArrayConstructorsList) {\n  Constructor = global$1[NAME];\n  Prototype = Constructor && Constructor.prototype;\n  if (Prototype) enforceInternalState(Prototype)[TYPED_ARRAY_CONSTRUCTOR] = Constructor;\n}\n\n// WebKit bug - typed arrays constructors prototype is Object.prototype\nif (!NATIVE_ARRAY_BUFFER_VIEWS || !isCallable(TypedArray) || TypedArray === Function.prototype) {\n  // eslint-disable-next-line no-shadow -- safe\n  TypedArray = function TypedArray() {\n    throw new TypeError$1('Incorrect invocation');\n  };\n  if (NATIVE_ARRAY_BUFFER_VIEWS) for (NAME in TypedArrayConstructorsList) {\n    if (global$1[NAME]) setPrototypeOf(global$1[NAME], TypedArray);\n  }\n}\n\nif (!NATIVE_ARRAY_BUFFER_VIEWS || !TypedArrayPrototype || TypedArrayPrototype === ObjectPrototype) {\n  TypedArrayPrototype = TypedArray.prototype;\n  if (NATIVE_ARRAY_BUFFER_VIEWS) for (NAME in TypedArrayConstructorsList) {\n    if (global$1[NAME]) setPrototypeOf(global$1[NAME].prototype, TypedArrayPrototype);\n  }\n}\n\n// WebKit bug - one more object in Uint8ClampedArray prototype chain\nif (NATIVE_ARRAY_BUFFER_VIEWS && getPrototypeOf(Uint8ClampedArrayPrototype) !== TypedArrayPrototype) {\n  setPrototypeOf(Uint8ClampedArrayPrototype, TypedArrayPrototype);\n}\n\nif (DESCRIPTORS && !hasOwn(TypedArrayPrototype, TO_STRING_TAG)) {\n  TYPED_ARRAY_TAG_REQUIRED = true;\n  defineBuiltInAccessor(TypedArrayPrototype, TO_STRING_TAG, {\n    configurable: true,\n    get: function () {\n      return isObject(this) ? this[TYPED_ARRAY_TAG] : undefined;\n    }\n  });\n  for (NAME in TypedArrayConstructorsList) if (global$1[NAME]) {\n    createNonEnumerableProperty(global$1[NAME], TYPED_ARRAY_TAG, NAME);\n  }\n}\n\nvar arrayBufferViewCore = {\n  NATIVE_ARRAY_BUFFER_VIEWS: NATIVE_ARRAY_BUFFER_VIEWS,\n  TYPED_ARRAY_TAG: TYPED_ARRAY_TAG_REQUIRED && TYPED_ARRAY_TAG,\n  aTypedArray: aTypedArray$3,\n  aTypedArrayConstructor: aTypedArrayConstructor,\n  exportTypedArrayMethod: exportTypedArrayMethod$3,\n  exportTypedArrayStaticMethod: exportTypedArrayStaticMethod,\n  getTypedArrayConstructor: getTypedArrayConstructor$3,\n  isView: isView,\n  isTypedArray: isTypedArray,\n  TypedArray: TypedArray,\n  TypedArrayPrototype: TypedArrayPrototype\n};\n\nvar arrayToReversed = arrayToReversed$1;\nvar ArrayBufferViewCore$2 = arrayBufferViewCore;\n\nvar aTypedArray$2 = ArrayBufferViewCore$2.aTypedArray;\nvar exportTypedArrayMethod$2 = ArrayBufferViewCore$2.exportTypedArrayMethod;\nvar getTypedArrayConstructor$2 = ArrayBufferViewCore$2.getTypedArrayConstructor;\n\n// `%TypedArray%.prototype.toReversed` method\n// https://tc39.es/ecma262/#sec-%typedarray%.prototype.toreversed\nexportTypedArrayMethod$2('toReversed', function toReversed() {\n  return arrayToReversed(aTypedArray$2(this), getTypedArrayConstructor$2(this));\n});\n\nvar lengthOfArrayLike$1 = lengthOfArrayLike$4;\n\nvar arrayFromConstructorAndList$1 = function (Constructor, list) {\n  var index = 0;\n  var length = lengthOfArrayLike$1(list);\n  var result = new Constructor(length);\n  while (length > index) result[index] = list[index++];\n  return result;\n};\n\nvar ArrayBufferViewCore$1 = arrayBufferViewCore;\nvar uncurryThis = functionUncurryThis;\nvar aCallable = aCallable$3;\nvar arrayFromConstructorAndList = arrayFromConstructorAndList$1;\n\nvar aTypedArray$1 = ArrayBufferViewCore$1.aTypedArray;\nvar getTypedArrayConstructor$1 = ArrayBufferViewCore$1.getTypedArrayConstructor;\nvar exportTypedArrayMethod$1 = ArrayBufferViewCore$1.exportTypedArrayMethod;\nvar sort = uncurryThis(ArrayBufferViewCore$1.TypedArrayPrototype.sort);\n\n// `%TypedArray%.prototype.toSorted` method\n// https://tc39.es/ecma262/#sec-%typedarray%.prototype.tosorted\nexportTypedArrayMethod$1('toSorted', function toSorted(compareFn) {\n  if (compareFn !== undefined) aCallable(compareFn);\n  var O = aTypedArray$1(this);\n  var A = arrayFromConstructorAndList(getTypedArrayConstructor$1(O), O);\n  return sort(A, compareFn);\n});\n\nvar lengthOfArrayLike = lengthOfArrayLike$4;\nvar toIntegerOrInfinity$1 = toIntegerOrInfinity$4;\n\nvar $RangeError = RangeError;\n\n// https://tc39.es/proposal-change-array-by-copy/#sec-array.prototype.with\n// https://tc39.es/proposal-change-array-by-copy/#sec-%typedarray%.prototype.with\nvar arrayWith$1 = function (O, C, index, value) {\n  var len = lengthOfArrayLike(O);\n  var relativeIndex = toIntegerOrInfinity$1(index);\n  var actualIndex = relativeIndex < 0 ? len + relativeIndex : relativeIndex;\n  if (actualIndex >= len || actualIndex < 0) throw new $RangeError('Incorrect index');\n  var A = new C(len);\n  var k = 0;\n  for (; k < len; k++) A[k] = k === actualIndex ? value : O[k];\n  return A;\n};\n\nvar classof = classof$4;\n\nvar isBigIntArray$1 = function (it) {\n  var klass = classof(it);\n  return klass === 'BigInt64Array' || klass === 'BigUint64Array';\n};\n\nvar toPrimitive = toPrimitive$2;\n\nvar $TypeError = TypeError;\n\n// `ToBigInt` abstract operation\n// https://tc39.es/ecma262/#sec-tobigint\nvar toBigInt$1 = function (argument) {\n  var prim = toPrimitive(argument, 'number');\n  if (typeof prim == 'number') throw new $TypeError(\"Can't convert number to bigint\");\n  // eslint-disable-next-line es/no-bigint -- safe\n  return BigInt(prim);\n};\n\nvar arrayWith = arrayWith$1;\nvar ArrayBufferViewCore = arrayBufferViewCore;\nvar isBigIntArray = isBigIntArray$1;\nvar toIntegerOrInfinity = toIntegerOrInfinity$4;\nvar toBigInt = toBigInt$1;\n\nvar aTypedArray = ArrayBufferViewCore.aTypedArray;\nvar getTypedArrayConstructor = ArrayBufferViewCore.getTypedArrayConstructor;\nvar exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;\n\nvar PROPER_ORDER = !!function () {\n  try {\n    // eslint-disable-next-line no-throw-literal, es/no-typed-arrays, es/no-array-prototype-with -- required for testing\n    new Int8Array(1)['with'](2, { valueOf: function () { throw 8; } });\n  } catch (error) {\n    // some early implementations, like WebKit, does not follow the final semantic\n    // https://github.com/tc39/proposal-change-array-by-copy/pull/86\n    return error === 8;\n  }\n}();\n\n// `%TypedArray%.prototype.with` method\n// https://tc39.es/ecma262/#sec-%typedarray%.prototype.with\nexportTypedArrayMethod('with', { 'with': function (index, value) {\n  var O = aTypedArray(this);\n  var relativeIndex = toIntegerOrInfinity(index);\n  var actualValue = isBigIntArray(O) ? toBigInt(value) : +value;\n  return arrayWith(O, getTypedArrayConstructor(O), relativeIndex, actualValue);\n} }['with'], !PROPER_ORDER);\n\nasync function* readChunks(reader) {\n  let readResult = await reader.read();\n  while (!readResult.done) {\n    yield readResult.value;\n    readResult = await reader.read();\n  }\n}\nfunction getLines() {\n  let buffer;\n  return function* onChunk(arr) {\n    buffer = buffer === undefined ? arr : concatBuffers(buffer, arr);\n    while (buffer && buffer.length) {\n      const nextNewLineIndex = buffer.findIndex(char => [ControlChars.NewLine, ControlChars.CarriageReturn].includes(char));\n      const foundEOL = nextNewLineIndex !== -1;\n      if (!foundEOL) {\n        // We reached the end of the buffer but the line hasn't ended.\n        // Wait for the next arr and then continue parsing:\n        break;\n      }\n      const hasCRLF = buffer[nextNewLineIndex] === ControlChars.CarriageReturn && buffer[nextNewLineIndex + 1] === ControlChars.NewLine;\n      const eol = hasCRLF ? nextNewLineIndex + 1 : nextNewLineIndex;\n      const nextColonIndex = buffer.findIndex(char => [ControlChars.Colon].includes(char));\n      const foundField = nextColonIndex !== -1 && nextColonIndex < nextNewLineIndex;\n      const fieldLength = foundField ? nextColonIndex : nextNewLineIndex;\n\n      // we've reached the line end, send it out:\n      yield [buffer.subarray(0, nextNewLineIndex), fieldLength];\n      buffer = buffer.subarray(eol + 1);\n    }\n  };\n}\nfunction getMessages() {\n  let message = undefined;\n  const decoder = new TextDecoder();\n\n  // return a function that can process each incoming line buffer:\n  return function* onLine(line, fieldLength) {\n    const isEndOfMessage = line.length === 0;\n    if (isEndOfMessage) {\n      if (message) {\n        yield [message];\n      }\n      message = createMessage();\n    } else if (fieldLength > 0) {\n      // exclude comments and lines with no values\n      // line is of format \"<field>:<value>\" or \"<field>: <value>\"\n      // https://html.spec.whatwg.org/multipage/server-sent-events.html#event-stream-interpretation\n      const field = decoder.decode(line.subarray(0, fieldLength));\n      const valueOffset = fieldLength + (line[fieldLength + 1] === ControlChars.Space ? 2 : 1);\n      const value = decoder.decode(line.subarray(valueOffset));\n      message ??= createMessage();\n      switch (field) {\n        case 'data':\n          // if this message already has data, append the new value to the old.\n          // otherwise, just set to the new value:\n          message.data = message.data ? message.data + '\\n' + value : value; // otherwise,\n          break;\n        case 'event':\n          message.event = value;\n          break;\n        case 'id':\n          message.id = value;\n          yield [undefined, value, undefined];\n          break;\n        case 'retry':\n          const retry = parseInt(value, 10);\n          if (!isNaN(retry)) {\n            // per spec, ignore non-integers\n            message.retry = retry;\n            yield [undefined, undefined, retry];\n          }\n          break;\n      }\n    }\n  };\n}\nvar ControlChars = /*#__PURE__*/function (ControlChars) {\n  ControlChars[ControlChars[\"NewLine\"] = 10] = \"NewLine\";\n  ControlChars[ControlChars[\"CarriageReturn\"] = 13] = \"CarriageReturn\";\n  ControlChars[ControlChars[\"Space\"] = 32] = \"Space\";\n  ControlChars[ControlChars[\"Colon\"] = 58] = \"Colon\";\n  return ControlChars;\n}(ControlChars || {});\nfunction concatBuffers(a, b) {\n  const res = new Uint8Array(a.length + b.length);\n  res.set(a);\n  res.set(b, a.length);\n  return res;\n}\nfunction createMessage() {\n  return {\n    data: '',\n    event: '',\n    id: '',\n    retry: undefined\n  };\n}\n\nconst ContentTypeEventStream = 'text/event-stream';\n\n/**\n * @deprecated\n */\n\nclass CustomEventSource extends EventTarget {\n  // https://html.spec.whatwg.org/multipage/server-sent-events.html#dom-eventsource-url\n\n  // https://html.spec.whatwg.org/multipage/server-sent-events.html#dom-eventsource-readystate\n  CONNECTING = 0;\n  OPEN = 1;\n  CLOSED = 2;\n  readyState = this.CONNECTING;\n\n  // https://html.spec.whatwg.org/multipage/server-sent-events.html#handler-eventsource-onopen\n  onerror = null;\n  // https://html.spec.whatwg.org/multipage/server-sent-events.html#handler-eventsource-onmessage\n  onmessage = null;\n  // https://html.spec.whatwg.org/multipage/server-sent-events.html#handler-eventsource-onerror\n  onopen = null;\n  onRetryDelayReceived = null;\n  timeoutId = undefined;\n  constructor(url, initDict,\n  /**\n   * @deprecated Use the related options in initDict\n   */\n  extraOptions) {\n    super();\n    this.options = initDict ?? {};\n    this.extraOptions = extraOptions;\n    this.url = url instanceof URL ? url.toString() : url;\n    this.retry = initDict?.retry ?? 5000;\n    if (!this.options.disableLogger) {\n      this.logger = this.options.logger ?? new ConsoleLogger();\n    }\n    this.connect();\n  }\n\n  // https://html.spec.whatwg.org/multipage/server-sent-events.html#dom-eventsource-withcredentials\n  get withCredentials() {\n    return this.options.withCredentials ?? false;\n  }\n  get retryDelay() {\n    return this.retry;\n  }\n  async connect(lastEventId) {\n    if (this.readyState === this.CLOSED) {\n      this.logger?.warn('Canceled reconnecting due to state already being closed');\n      return;\n    }\n    try {\n      // https://html.spec.whatwg.org/multipage/server-sent-events.html#dom-eventsource\n      this.abortController = new AbortController();\n      this.readyState = this.CONNECTING;\n      const fetchOptions = {\n        ...this.options,\n        headers: lastEventId ? {\n          ...this.options.headers,\n          Accept: ContentTypeEventStream,\n          'Last-Event-ID': lastEventId\n        } : {\n          ...this.options.headers,\n          Accept: ContentTypeEventStream\n        },\n        cache: 'no-store',\n        credentials: this.withCredentials ? 'include' : 'omit',\n        signal: this.abortController?.signal\n      };\n      const response = this.options.fetch ? await this.options.fetch(this.url, fetchOptions) : this.extraOptions?.fetchInput ? await this.extraOptions.fetchInput(this.url, fetchOptions) : await globalThis.fetch(this.url, fetchOptions);\n\n      // https://html.spec.whatwg.org/multipage/server-sent-events.html#dom-eventsource (Step 15)\n      if (response.status !== 200) {\n        return this.failConnection(`Request failed with status code ${response.status}`, response);\n      } else if (!response.headers.get('Content-Type')?.includes(ContentTypeEventStream)) {\n        return this.failConnection(`Request failed with wrong content type '${response.headers.get('Content-Type')}'`, response);\n      } else if (!response?.body) {\n        return this.failConnection(`Request failed with empty response body'`, response);\n      }\n      this.announceConnection(response);\n      const reader = response.body.getReader();\n      const getLine = getLines();\n      const getMessage = getMessages();\n      for await (const chunk of readChunks(reader)) {\n        for await (const [line, fieldLength] of getLine(chunk)) {\n          for await (const [message, id, retry] of getMessage(line, fieldLength)) {\n            if (typeof id !== 'undefined') {\n              this.currentLastEventId = id;\n            } else if (typeof retry !== 'undefined') {\n              this.retry = retry;\n              this.onRetryDelayReceived?.(retry);\n            } else if (message) {\n              this.dispatchMessage(message, this.currentLastEventId, response.url);\n            }\n          }\n        }\n      }\n    } catch (error) {\n      if (typeof error === 'object' && error?.name === 'AbortError') {\n        return;\n      }\n      await this.reconnect('Reconnecting EventSource because of error', error);\n      return;\n    }\n    await this.reconnect('Reconnecting because EventSource connection closed');\n  }\n\n  // https://html.spec.whatwg.org/multipage/server-sent-events.html#reestablish-the-connection\n  async reconnect(msg, error) {\n    const event = new Event('error');\n    this.dispatchEvent(event);\n    this.onerror?.(event);\n    if (error) {\n      this.logger?.warn('Error occurred in EventSource', error ?? '');\n    }\n    if (this.readyState === this.CLOSED || this.options.disableRetry) {\n      return;\n    }\n    if (msg) {\n      this.logger?.warn(msg, error ?? '');\n    }\n    this.timeoutId = setTimeout(async () => {\n      await this.connect(this.currentLastEventId);\n    }, this.retry);\n  }\n\n  // https://html.spec.whatwg.org/multipage/server-sent-events.html#dispatchMessage\n  dispatchMessage(message, lastEventId, url) {\n    const origin = url && URL.canParse(url) ? new URL(url) : undefined;\n    const eventType = !message?.event ? 'message' : message.event;\n    const event = new MessageEvent(eventType, {\n      data: message?.data,\n      // https://html.spec.whatwg.org/multipage/server-sent-events.html#dispatchMessage (Note)\n      lastEventId: message?.id || lastEventId,\n      origin: origin?.origin\n    });\n    this.dispatchEvent(event);\n    if (eventType === 'message') {\n      this.onmessage?.(event);\n    }\n  }\n\n  // https://html.spec.whatwg.org/multipage/server-sent-events.html#fail-the-connection\n  failConnection(error, response) {\n    this.logger?.error('Fatal error occurred in EventSource', error);\n    this.readyState = this.CLOSED;\n    const event = new Event('error');\n    event.response = response;\n    this.dispatchEvent(event);\n    this.onerror?.(event);\n  }\n\n  // https://html.spec.whatwg.org/multipage/server-sent-events.html#announce-the-connection\n  announceConnection(response) {\n    this.logger?.debug('Connection established');\n    this.readyState = this.OPEN;\n    const event = new Event('open');\n    event.response = response;\n    this.dispatchEvent(event);\n    this.onopen?.(event);\n  }\n\n  // https://html.spec.whatwg.org/multipage/server-sent-events.html#dom-eventsource-close\n  close() {\n    this.readyState = this.CLOSED;\n    clearTimeout(this.timeoutId);\n    this.abortController?.abort();\n  }\n  addEventListener(type, listener, options) {\n    super.addEventListener(type, listener, options);\n  }\n  removeEventListener(type, listener, options) {\n    super.removeEventListener(type, listener, options);\n  }\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/extended-eventsource/dist/index.esm.js\n");

/***/ })

};
;